#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#include<string.h>
#include "util.h"

EXEC SQL INCLUDE SQLCA; 

EXEC SQL BEGIN DECLARE SECTION;
	sqlint32 aid;
	sqlint32 aorder;
	sqlint32 year;
	sqlint32 volume;
	sqlint32 number;
	sqlint32 startpage;
	sqlint32 endpage;

	sqlint32 already_exist;

	char name[23];
	char url[43];
	char pubid[11];
	char title[71];
	char publisher[51];
	char appearsin[11];

	const char db[6] = "CS348";
EXEC SQL END DECLARE SECTION;

void parse_publication() {
	// Check if the publication already exist.
	EXEC SQL
		select count(*) INTO :already_exist 
		from publication 
		where pubid = :pubid;

	if (already_exist) {  // Publication already exist.
		EXEC SQL 
			update publication 
			set title = :title 
			where pubid = :pubid;
	} else {  // Publication not exist.
		EXEC SQL 
			insert into publication 
			values (:pubid, :title);
	}
}

void parse_authorsid(char *authors) {
	EXEC SQL 
		delete from wrote
		pubid = :pubidï¼›

	printf("Authors: "); 

	authors = strtok(authors,";");
	for(aorder = 1;  ; aorder++) {
		aid = atoi(authors);

		EXEC SQL 
			insert into wrote
			values (:aid, :pubid, :aorder);

		EXEC SQL 
			select trim(name) INTO :name 
			from author 
			where aid = :aid;

		printf("%s", name);

		authors = strtok(NULL, ";");
		if (authors == NULL) break;

		printf(", ");
	}

	printf("\n");
}

void parse_author() {
	// Check if author already exist.
	EXEC SQL
		select count(*) INTO :already_exist 
		from author 
		where aid = :aid;
	
	if (already_exist) {  // Author already exist.
		EXEC SQL 
			update author 
			set name = :name 
			where aid = :aid;
	} else {  // Authot not exist.
		EXEC SQL 
			insert into author (aid, name) 
			values (:aid, :name);
	}
}

void parse_authorurl() {
	// Update author url.
	EXEC SQL 
		update author 
		set url = :url 
		where aid = :aid;
}

void parse_book() {
	// Get authors id.
	char *authors = strtok(NULL,"#");
	// Get publisher.
	strcpy(publisher, strtok(NULL,"#"));
	// Get year.
	year = atoi(strtok(NULL,")"));

	// Check if book already exist.
	EXEC SQL
        select count(*) INTO :already_exist
        from book
        where pubid = :pubid;

    if(already_exist) { // Book already exist.
        EXEC SQL
            update book
            set publisher = :publisher, year = :year
            where pubid = :pubid;
    } else {  // Book not exist.
        EXEC SQL 
			insert into book 
			values (:pubid, :publisher, :year);   
    }

	parse_authorsid(authors);
	printf("Publisher: %s\nYear:%d\n", publisher, year);
}

void parse_journal() {
	// Get volume.
	volume = atoi(strtok(NULL,"#"));
	// Get number.
	number = atoi(strtok(NULL,"#"));
	// Get year.
	year = atoi(strtok(NULL,")"));

	// Check if journal already exist.
	EXEC SQL
        select count(*) INTO :already_exist
        from journal
        where pubid = :pubid;

    if(already_exist) {  // Journal already exist.
        EXEC SQL
            update journal
            set volume = :volume, number = :number, year = :year
            where pubid = :pubid;
    } else {  // Journal already exist.
        EXEC SQL 
			insert into journal 
			values (:pubid, :volume, :number, :year);
    }

	printf("Volume: %d\nNumber: %d\nYear:%d\n", volume, number, year);
}

void parse_proceedings() {
	// Get year.
	year = atoi(strtok(NULL,")"));

	// Check if proceeding already exist.
	EXEC SQL
        select count(*) INTO :already_exist
        from proceedings
        where pubid = :pubid;

    if(already_exist) {  // Proceeding already exist.
        EXEC SQL
            update proceedings
            set year = :year
            where pubid = :pubid;
    } else {  // Proceeding not exist.
        EXEC SQL 
			insert into proceedings 
			values (:pubid, :year);
    }

	printf("Year: %d\n", year);
}

void parse_article() {
	// Get authors id.
	char *authors = strtok(NULL,"#");
	// Get appearsin.
	strcpy(appearsin, strtok(NULL,"#"));
	// Get start page.
	startpage = atoi(strtok(NULL,"#"));
	// Get end page.
	endpage = atoi(strtok(NULL,"#"));

	// Check if article already exist.
	EXEC SQL
        select count(*) INTO :already_exist
        from article
        where pubid = :pubid;

    if(already_exist) {  // Article already exist.
        EXEC SQL
            update article
            set appearsin = :appearsin, startpage = :startpage, endpage = :endpage
            where pubid = :pubid;
    } else {  // Article not exist.
        EXEC SQL 
			insert into article
			values (:pubid, :appearsin, :startpage, :endpage);
    }

	parse_authorsid(authors);
	printf("In:%s\nPages: %d--%d\n", appearsin, startpage, endpage);
}

int main() {
	EXEC SQL WHENEVER SQLERROR  GO TO error;
	EXEC SQL CONNECT TO :db;

	char *command = malloc(4096);
	size_t bufsize = 4096;
	char *token;

	getline(&command, &bufsize, stdin);

	while(!feof(stdin)) {
		token = strtok(command,"(");

		bool author = (!strcmp(token,"author"));
		bool authorurl = (!strcmp(token,"authorurl"));
		bool book = (!strcmp(token,"book"));
		bool journal = (!strcmp(token,"journal"));
		bool proceedings = (!strcmp(token,"proceedings"));
		bool article = (!strcmp(token,"article"));

		if (author || authorurl) {
			// Get author id.
			aid = atoi(strtok(NULL,"#"));
			// Get author name/url.
			char *temp = strtok(NULL,")");

			if (author) {
				strcpy(name, temp);
				parse_author();
			} else if (authorurl) {
				strcpy(url, temp);
				parse_authorurl();
			}
		} else if (book || journal || proceedings || article) {
			// Get publication id.
			strcpy(pubid, strtok(NULL,"#"));
			// Get publication title.
			strcpy(title, strtok(NULL,"#"));

			// Check if publication already exists, then insert/modify.
			parse_publication();

			printf("Pubid: %s\n", pubid);
			if (book) {
				printf("Type: book\n");
				printf("Title: %s\n", title);

				parse_book();
			} else if (journal) {
				printf("Type: journal\n");
				printf("Title: %s\n", title);

				parse_journal();
			} else if (proceedings) {
				printf("Type: proceedings\n");
				printf("Title: %s\n", title);

				parse_proceedings();
			} else if (article) {
				printf("Type: article\n");
				printf("Title: %s\n", title);

				parse_article();
			}

			printf("\n");
		}

		getline(&command, &bufsize, stdin);
	}

	free(command);

	EXEC SQL COMMIT;
	EXEC SQL CONNECT reset;

	return (0);

error:
	printf("update failed, sqlcode = %ld\n",SQLCODE );

	EXEC SQL WHENEVER SQLERROR CONTINUE;

	EXEC SQL ROLLBACK;
	EXEC SQL CONNECT reset;
	return(-1);
}